"use client";

import { useEffect, useState, useMemo } from "react";
import { supabase } from "../../lib/supabase-browser";

type Task = {
  id: string | number;
  title?: string | null;
  description?: string | null;
  notes?: string | null;
  status?: string | null;
  completed_at?: string | null;
  completion_percent?: number | null;
  photo_required?: boolean | null;
  photo_url?: string | null;
  assignee_user_id?: string | null;
  assignee_role_id?: string | null;
  transferable?: boolean | null;
  due_at?: string | null;
  for_date?: string | null;
};

type TaskFormData = {
  completion_percent: number;
  notes: string;
  reason: string;
  photo: File | null;
};

export default function TodayPage() {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [uid, setUid] = useState<string | null>(null);
  const [roleIds, setRoleIds] = useState<string[]>([]);
  const [filter, setFilter] = useState<'all' | 'mine' | 'role'>('all');
  const [updatingIds, setUpdatingIds] = useState<Set<string | number>>(new Set());
  
  // Task completion modal state
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [taskForm, setTaskForm] = useState<TaskFormData>({
    completion_percent: 100,
    notes: "",
    reason: "",
    photo: null
  });
  const [submittingTask, setSubmittingTask] = useState(false);
  const [photoPreview, setPhotoPreview] = useState<string | null>(null);

  const today = useMemo(() => new Date().toISOString().slice(0, 10), []);

  // Completion reasons for when task is not 100%
  const completionReasons = [
    "Ran out of time",
    "Missing supplies/ingredients", 
    "Equipment issue",
    "Need manager assistance",
    "Will finish next shift",
    "Partial completion acceptable",
    "Other"
  ];

  useEffect(() => {
    let sub: any = null;
    const loadTasks = async () => {
      setLoading(true);
      setError(null);
      try {
        const { data: sessionData, error: sessionErr } = await supabase.auth.getSession();
        if (sessionErr) throw sessionErr;
        
        const _uid = sessionData.session?.user?.id;
        setUid(_uid || null);
        
        if (!_uid) {
          setTasks([]);
          setLoading(false);
          return;
        }

        // Load user's roles
        const { data: userRoles, error: rolesErr } = await supabase
          .from("user_roles")
          .select("role_id")
          .eq("user_id", _uid);
        if (rolesErr) throw rolesErr;
        
        const _roleIds = (userRoles || []).map((r: any) => r.role_id);
        setRoleIds(_roleIds);

        // Load tasks assigned directly to user
        const { data: userTasks, error: userTasksErr } = await supabase
          .from("task_instances")
          .select("*")
          .eq("for_date", today)
          .eq("assignee_user_id", _uid)
          .order("due_at", { ascending: true, nullsFirst: true });
        if (userTasksErr) throw userTasksErr;

        // Load tasks assigned to user's roles
        let roleTasks: Task[] = [];
        if (_roleIds.length > 0) {
          const { data: _roleTasks, error: roleTasksErr } = await supabase
            .from("task_instances")
            .select("*")
            .eq("for_date", today)
            .in("assignee_role_id", _roleIds)
            .order("due_at", { ascending: true, nullsFirst: true });
          if (roleTasksErr) throw roleTasksErr;
          roleTasks = _roleTasks || [];
        }

        // Merge and deduplicate tasks
        const taskMap = new Map<string | number, Task>();
        (userTasks || []).forEach((t: Task) => taskMap.set(t.id, t));
        roleTasks.forEach((t: Task) => taskMap.set(t.id, t));
        
        const allTasks = Array.from(taskMap.values());
        
        // Sort: incomplete first, then by due time, then by title
        allTasks.sort((a, b) => {
          const aDone = !!(a.completed_at || a.status === "completed");
          const bDone = !!(b.completed_at || b.status === "completed");
          if (aDone !== bDone) return aDone ? 1 : -1;
          
          const aDue = a.due_at || "";
          const bDue = b.due_at || "";
          if (aDue !== bDue) return aDue.localeCompare(bDue);
          
          const aTitle = (a.title || "").toLowerCase();
          const bTitle = (b.title || "").toLowerCase();
          return aTitle.localeCompare(bTitle);
        });

        setTasks(allTasks);

        // Subscribe to real-time updates
        sub = supabase
          .channel('task-updates')
          .on('postgres_changes', {
            event: '*',
            schema: 'public',
            table: 'task_instances',
            filter: `for_date=eq.${today}`,
          }, (payload: any) => {
            setTasks(prev => {
              if (payload.eventType === 'INSERT') {
                return [...prev, payload.new];
              }
              if (payload.eventType === 'UPDATE') {
                return prev.map(t => t.id === payload.new.id ? { ...t, ...payload.new } : t);
              }
              if (payload.eventType === 'DELETE') {
                return prev.filter(t => t.id !== payload.old.id);
              }
              return prev;
            });
          })
          .subscribe();

      } catch (e: any) {
        setError(e?.message || "Failed to load tasks");
        console.error("Task loading error:", e);
      } finally {
        setLoading(false);
      }
    };

    loadTasks();
    return () => {
      if (sub) sub.unsubscribe();
    };
  }, [today]);

  // Open task completion modal
  const openTaskModal = (task: Task) => {
    setSelectedTask(task);
    setTaskForm({
      completion_percent: task.completion_percent || 100,
      notes: task.notes || "",
      reason: "",
      photo: null
    });
    setPhotoPreview(null);
  };

  // Handle photo selection
  const handlePhotoSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setTaskForm(prev => ({ ...prev, photo: file }));
      
      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setPhotoPreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // Submit task completion
  const submitTaskCompletion = async () => {
    if (!selectedTask) return;
    
    setSubmittingTask(true);
    try {
      let photoUrl = null;
      
      // Upload photo if provided
      if (taskForm.photo) {
        const fileExt = taskForm.photo.name.split('.').pop() || 'jpg';
        const fileName = `${selectedTask.id}_${Date.now()}.${fileExt}`;
        const filePath = `task-photos/${today}/${fileName}`;
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('attachments')
          .upload(filePath, taskForm.photo, {
            cacheControl: '3600',
            upsert: false
          });
          
        if (uploadError) throw uploadError;
        
        const { data: urlData } = supabase.storage
          .from('attachments')
          .getPublicUrl(filePath);
        
        photoUrl = urlData.publicUrl;
      }

      // Update task
      const updateData: any = {
        completion_percent: taskForm.completion_percent,
        notes: taskForm.notes,
        status: taskForm.completion_percent === 100 ? 'completed' : 'in_progress',
        completed_at: taskForm.completion_percent === 100 ? new Date().toISOString() : null,
        updated_at: new Date().toISOString(),
      };

      // Add reason if not 100% complete
      if (taskForm.completion_percent < 100 && taskForm.reason) {
        updateData.completion_reason = taskForm.reason;
      }

      if (photoUrl) {
        updateData.photo_url = photoUrl;
      }

      const { error: updateError } = await supabase
        .from('task_instances')
        .update(updateData)
        .eq('id', selectedTask.id);

      if (updateError) throw updateError;

      // Close modal and reset form
      setSelectedTask(null);
      setTaskForm({ completion_percent: 100, notes: "", reason: "", photo: null });
      setPhotoPreview(null);
      
    } catch (e: any) {
      setError(e?.message || "Failed to update task");
      console.error("Task completion error:", e);
    } finally {
      setSubmittingTask(false);
    }
  };

  // Quick toggle completion
  const quickToggleTask = async (task: Task) => {
    try {
      setUpdatingIds(prev => new Set(prev).add(task.id));
      
      const isDone = !!(task.completed_at || task.status === "completed");
      const updateData = isDone 
        ? { 
            completed_at: null, 
            status: "pending", 
            completion_percent: 0,
            updated_at: new Date().toISOString()
          }
        : { 
            completed_at: new Date().toISOString(), 
            status: "completed", 
            completion_percent: 100,
            updated_at: new Date().toISOString()
          };

      const { error } = await supabase
        .from("task_instances")
        .update(updateData)
        .eq("id", task.id);

      if (error) throw error;

    } catch (e: any) {
      setError(e?.message || "Failed to update task");
    } finally {
      setUpdatingIds(prev => {
        const next = new Set(prev);
        next.delete(task.id);
        return next;
      });
    }
  };

  // Filter tasks
  const filteredTasks = useMemo(() => {
    if (filter === 'mine' && uid) {
      return tasks.filter(t => t.assignee_user_id === uid);
    }
    if (filter === 'role' && roleIds.length > 0) {
      return tasks.filter(t => t.assignee_role_id && roleIds.includes(t.assignee_role_id));
    }
    return tasks;
  }, [tasks, filter, uid, roleIds]);

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <div className="text-2xl mb-2">⏳</div>
          <p className="text-gray-600">Loading your tasks...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold">📋 Today's Tasks</h1>
        <div className="text-sm text-gray-500">
          {new Date().toLocaleDateString('en-US', { 
            weekday: 'long', 
            month: 'short', 
            day: 'numeric' 
          })}
        </div>
      </div>
      
      {/* Filter buttons */}
      <div className="flex gap-2 mb-4">
        <button
          className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
            filter === 'all' 
              ? 'bg-emerald-600 text-white' 
              : 'bg-white border border-gray-300 text-gray-700'
          }`}
          onClick={() => setFilter('all')}
        >
          All Tasks
        </button>
        <button
          className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
            filter === 'mine' 
              ? 'bg-emerald-600 text-white' 
              : 'bg-white border border-gray-300 text-gray-700'
          }`}
          onClick={() => setFilter('mine')}
        >
          👤 My Tasks
        </button>
        <button
          className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
            filter === 'role' 
              ? 'bg-emerald-600 text-white' 
              : 'bg-white border border-gray-300 text-gray-700'
          }`}
          onClick={() => setFilter('role')}
        >
          👥 Role Tasks
        </button>
      </div>

      {/* Error display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-start">
            <div className="text-red-400 text-lg mr-3">⚠️</div>
            <div>
              <h3 className="text-red-800 font-medium">Error</h3>
              <p className="text-red-600 text-sm mt-1">{error}</p>
              <button 
                onClick={() => setError(null)}
                className="text-red-600 text-sm underline mt-2"
              >
                Dismiss
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Empty state */}
      {!loading && filteredTasks.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">🎉</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">All caught up!</h3>
          <p className="text-gray-600">
            {filter === 'all' 
              ? "No tasks assigned for today." 
              : `No ${filter} tasks for today.`}
          </p>
        </div>
      )}

      {/* Tasks list */}
      <div className="space-y-3">
        {filteredTasks.map((task) => {
          const title = task.title || `Task ${task.id}`;
          const isDone = !!(task.completed_at || task.status === "completed");
          const completion = task.completion_percent || 0;
          const isUpdating = updatingIds.has(task.id);
          
          return (
            <div 
              key={task.id} 
              className={`bg-white rounded-lg border shadow-sm p-4 transition-all ${
                isDone ? 'opacity-75 border-emerald-200' : 'border-gray-200'
              }`}
            >
              {/* Task header */}
              <div className="flex items-start justify-between gap-3 mb-3">
                <div className="flex-1">
                  <h3 className={`font-medium ${isDone ? 'text-gray-600 line-through' : 'text-gray-900'}`}>
                    {title}
                  </h3>
                  {task.description && (
                    <p className="text-sm text-gray-600 mt-1">{task.description}</p>
                  )}
                  {task.due_at && (
                    <div className="flex items-center gap-1 text-xs text-gray-500 mt-1">
                      <span>⏰</span>
                      <span>Due: {new Date(task.due_at).toLocaleTimeString([], { 
                        hour: "2-digit", 
                        minute: "2-digit" 
                      })}</span>
                    </div>
                  )}
                </div>
                
                {/* Status badge */}
                <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                  isDone 
                    ? 'bg-emerald-100 text-emerald-800' 
                    : completion > 0 
                      ? 'bg-amber-100 text-amber-800' 
                      : 'bg-gray-100 text-gray-800'
                }`}>
                  {isDone ? '✅ Complete' : completion > 0 ? '🔄 In Progress' : '⭕ Pending'}
                </div>
              </div>

              {/* Progress bar */}
              <div className="mb-3">
                <div className="flex items-center justify-between text-xs text-gray-600 mb-1">
                  <span>Progress</span>
                  <span>{completion}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-300 ${
                      completion === 100 ? 'bg-emerald-500' : 
                      completion >= 50 ? 'bg-amber-500' : 'bg-blue-500'
                    }`}
                    style={{ width: `${completion}%` }}
                  />
                </div>
              </div>

              {/* Action buttons */}
              <div className="flex gap-2">
                <button
                  onClick={() => openTaskModal(task)}
                  className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
                >
                  📝 {isDone ? 'View Details' : 'Complete Task'}
                </button>
                
                <button
                  onClick={() => quickToggleTask(task)}
                  disabled={isUpdating}
                  className={`px-4 py-2 rounded-lg text-sm font-medium border transition-colors ${
                    isDone 
                      ? 'border-gray-300 text-gray-700 hover:bg-gray-50' 
                      : 'border-emerald-600 bg-emerald-600 text-white hover:bg-emerald-700'
                  } disabled:opacity-50`}
                >
                  {isUpdating ? '⏳' : isDone ? '↩️ Undo' : '✅ Quick Done'}
                </button>
              </div>

              {/* Task notes */}
              {task.notes && (
                <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                  <div className="text-xs text-gray-500 mb-1">Notes:</div>
                  <div className="text-sm text-gray-700">{task.notes}</div>
                </div>
              )}

              {/* Photo */}
              {task.photo_url && (
                <div className="mt-3">
                  <div className="text-xs text-gray-500 mb-2">Evidence Photo:</div>
                  <img 
                    src={task.photo_url} 
                    alt="Task evidence" 
                    className="w-24 h-24 object-cover rounded-lg border"
                  />
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Task Completion Modal */}
      {selectedTask && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-xl font-semibold mb-4">
                {selectedTask.title || `Task ${selectedTask.id}`}
              </h2>
              
              {selectedTask.description && (
                <p className="text-gray-600 text-sm mb-4">{selectedTask.description}</p>
              )}

              <div className="space-y-4">
                {/* Completion Level */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Completion Level
                  </label>
                  <div className="grid grid-cols-4 gap-2">
                    {[25, 50, 75, 100].map(percent => (
                      <button
                        key={percent}
                        onClick={() => setTaskForm(prev => ({ ...prev, completion_percent: percent }))}
                        className={`py-3 px-2 rounded-lg text-sm font-medium border transition-colors ${
                          taskForm.completion_percent === percent
                            ? 'bg-emerald-600 text-white border-emerald-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:border-emerald-300'
                        }`}
                      >
                        {percent}%
                      </button>
                    ))}
                  </div>
                </div>

                {/* Reason (if not 100%) */}
                {taskForm.completion_percent < 100 && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Reason for incomplete <span className="text-red-500">*</span>
                    </label>
                    <select
                      value={taskForm.reason}
                      onChange={(e) => setTaskForm(prev => ({ ...prev, reason: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                      required
                    >
                      <option value="">Select a reason...</option>
                      {completionReasons.map(reason => (
                        <option key={reason} value={reason}>{reason}</option>
                      ))}
                    </select>
                  </div>
                )}

                {/* Notes */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Notes (optional)
                  </label>
                  <textarea
                    value={taskForm.notes}
                    onChange={(e) => setTaskForm(prev => ({ ...prev, notes: e.target.value }))}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                    rows={3}
                    placeholder="Add any additional notes about this task..."
                  />
                </div>

                {/* Photo Upload */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Photo Evidence {selectedTask.photo_required ? 
                      <span className="text-red-500">*</span> : 
                      <span className="text-gray-500">(optional)</span>
                    }
                  </label>
                  <input
                    type="file"
                    accept="image/*"
                    capture="environment"
                    onChange={handlePhotoSelect}
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  />
                  
                  {photoPreview && (
                    <div className="mt-2">
                      <img 
                        src={photoPreview} 
                        alt="Preview" 
                        className="w-32 h-32 object-cover rounded-lg border"
                      />
                    </div>
                  )}
                </div>

                {/* Action Buttons */}
                <div className="flex gap-3 pt-4 border-t">
                  <button
                    onClick={() => {
                      setSelectedTask(null);
                      setTaskForm({ completion_percent: 100, notes: "", reason: "", photo: null });
                      setPhotoPreview(null);
                    }}
                    className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-200 transition-colors"
                    disabled={submittingTask}
                  >
                    Cancel
                  </button>
                  <button
                    onClick={submitTaskCompletion}
                    disabled={
                      submittingTask || 
                      (taskForm.completion_percent < 100 && !taskForm.reason) ||
                      (!!selectedTask.photo_required && !taskForm.photo)
                    }
                    className="flex-1 bg-emerald-600 text-white py-3 rounded-lg font-medium hover:bg-emerald-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {submittingTask ? '💾 Saving...' : '💾 Save'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
